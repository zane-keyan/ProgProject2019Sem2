import { CarSchema } from '../models/crmModel';
import mongoose from 'mongoose';
const Car = mongoose.model('Car', CarSchema);
var { promisify } = require('util');

//Google Distance matrix api configs
var distance = require('google-distance-matrix'); 
distance.key('AIzaSyCVT0ufJbPLrh4hbunIDrF3TYDAolrNOlg');
distance.units('metric');

//var matrix = promisify(distance.matrix);
var origins = ['Melbourne , AU'];

export async function getCars2(req , res ){

  var retrievedCars = [];
  var carAndDistanceArray = [];

  var retrievedCars = await Car.find({} , (err , car) =>{
    if (err){
      res.send(err);
    }
    retrievedCars.push(car);
  });

//   var distanceValue = await getDistance(retrievedCars[0]);

var distancesArray = [];
  for ( var i = 0 ; i < retrievedCars.length ; i++){
    var currentCar = retrievedCars[i];
   
    

    
    distancesArray.push(currentCar.address);

  }

  var retrievedValues = await getDistance(distancesArray);
  
//   for ( var i = 0 ; i < retrievedCars.length ; i++){
//     var currentCar = retrievedCars[i];

//     //create JSON object to be return
//     var jsonItem = {car: currentCar , distance: retrievedValues[i]}
//     carAndDistanceArray.push(jsonItem);
  
// }

console.log(retrievedValues);


  //console.log("Values are " + retrievedValues);
  //console.log(carAndDistanceArray);
  res.json(retrievedCars);
  console.log("completed");
} 

// calc distance for a car
async function getDistance(location){
var destinations = [location];

var distanceValue;



var distancePromise  = new Promise( function (resolve , reject) {

     distance.matrix(origins, destinations,  function (err, distances) {
        if (err) {
            return console.log(err);
        }
        if(!distances) {
            return console.log('no distances');
        }
        if (distances.status == 'OK') {
          if (distances.rows[0].elements[0].status == 'OK') {
            
            //distanceValue = distances.rows[0].elements[0].distance;  
            //console.log("distance value" + distanceValue);
            resolve(distances);
          }        
        }

       
    
    } );


} );

//return result
//return distancePromise.then(function(result) { return result;}).catch(error => { console.log("error" + error.message)});
return await distancePromise;

}




